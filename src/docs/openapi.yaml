openapi: 3.0.0
info:
  title: Platform API
  version: 1.0.0
  description: API for managing users, products, and purchases

servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Users
    description: Operations related to users
  - name: Products
    description: Operations related to products
  - name: Purchases
    description: Operations related to purchases
  - name: Auth
    description: Authentication operations (register and login)


paths:
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid input

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

    put:
      tags:
        - Users
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        200:
          description: User updated successfully
        400:
          description: Invalid input
        404:
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found

  /api/v1/products:
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        201:
          description: Product created successfully
        400:
          description: Invalid input
        409:
          description: Product conflict (e.g. duplicate ID)

  /api/v1/products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found

    put:
      tags:
        - Products
      summary: Update a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        200:
          description: Product updated successfully
        400:
          description: Invalid input
        404:
          description: Product not found

    delete:
      tags:
        - Products
      summary: Delete a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Product deleted successfully
        404:
          description: Product not found

  /api/v1/purchases:
    get:
      tags:
        - Purchases
      summary: Get all purchases
      responses:
        200:
          description: A list of purchases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

    post:
      tags:
        - Purchases
      summary: Create a new purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseInput'
      responses:
        201:
          description: Purchase created successfully
        400:
          description: Invalid input
        409:
          description: Purchase conflict (e.g. duplicate product)

  /api/v1/purchases/{id}:
    get:
      tags:
        - Purchases
      summary: Get a purchase by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Purchase found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        404:
          description: Purchase not found

    put:
      tags:
        - Purchases
      summary: Update a purchase by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseInput'
      responses:
        200:
          description: Purchase updated successfully
        400:
          description: Invalid input
        404:
          description: Purchase not found

    delete:
      tags:
        - Purchases
      summary: Delete a purchase by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Purchase deleted successfully
        404:
          description: Purchase not found

  /api/v1/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - username
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: User registered successfully
        400:
          description: Username already exists or invalid input

  /api/v1/auth/login:
    post:
      tags:
        - Auth
      summary: Log in a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Invalid credentials

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: '6635e957a6a5fc1e6fbf9d1a'
        name:
          type: string
          example: 'Jane Smith'
        email:
          type: string
          example: 'jane.smith@example.com'
        username:
          type: string
          example: 'janesmith'
        role:
          type: string
          enum: [user, admin]
          example: 'user'
        rank:
          type: integer
          example: 7
        review:
          type: string
          example: 'Excellent contributor'
        isVerified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2025-04-01T12:34:56.789Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-04-05T09:00:00.000Z'

    UserInput:
      type: object
      required:
        - name
        - email
        - username
        - password
      properties:
        name:
          type: string
          example: 'Jane Smith'
        email:
          type: string
          example: 'jane.smith@example.com'
        username:
          type: string
          example: 'janesmith'
        password:
          type: string
          example: 'securepassword123'
        role:
          type: string
          enum: [user, admin]
          example: 'user'
        rank:
          type: integer
          example: 7
        review:
          type: string
          example: 'Excellent contributor'
        isVerified:
          type: boolean
          example: false

    Product:
      type: object
      properties:
        id:
          type: string
          example: '6635f1234567890abcdef123'
        name:
          type: string
          example: 'Sample Product'
        description:
          type: string
          example: 'Generic product description'
        price:
          type: number
          example: 99.99
        images:
          type: array
          items:
            type: string
          example: ['https://example.com/image1.jpg']
        status:
          type: string
          enum: [available, sold, pending]
          example: 'available'
        ownerId:
          type: string
          example: '6635e957a6a5fc1e6fbf9d1a'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductInput:
      type: object
      required:
        - name
        - description
        - price
        - ownerId
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        images:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [available, sold, pending]
        ownerId:
          type: string

    Purchase:
      type: object
      properties:
        id:
          type: string
          example: '6636009876543210fedcba98'
        buyerId:
          type: string
          example: '6635e957a6a5fc1e6fbf9d1a'
        productId:
          type: string
          example: '6635f1234567890abcdef123'
        lockerId:
          type: number
          example: 12
        status:
          type: string
          enum: [pending, approved, delivered, cancelled]
          example: 'pending'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PurchaseInput:
      type: object
      required:
        - buyerId
        - productId
        - lockerId
      properties:
        buyerId:
          type: string
        productId:
          type: string
        lockerId:
          type: number
        status:
          type: string
          enum: [pending, approved, delivered, cancelled]
